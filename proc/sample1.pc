/*
* 단건 조회시 출력을 구조체 단위로 데이터를 받는 방법
*/

#include "sample1.h"

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sqlca.h>
#include <sqlda.h>
#include <sqlcpr.h>


#define MEMCPY(x, y, size) { \
	strncpy((char *) y.arr, x, size); \
    y.len = strlen((char *) y.arr); \
}

EXEC SQL BEGIN DECLARE SECTION ;
	/* 변수길이 상수 선언 */
	#define     UNAME_LEN      20
	#define     PWD_LEN        40


	/* OUTPUT 데이터 구조체 */
	struct
	{
		int 	  empno;
		VARCHAR   emp_name[UNAME_LEN];
		float     salary;
		float     commission;
	} emprec;

	/* OUTPUT indicator 구조체 */
	struct
	{
		short 	  empno_ind;
		short     emp_name_ind;
		short     sal_ind;
		short     comm_ind;
	} emprec_ind;

	/*  INPUT host 변수 */
	int         emp_number;
EXEC SQL END DECLARE SECTION ;




//=============================================
/* 오류처리 함수 */
void sql_error(const char *msg)
{
    char err_msg[128];
    size_t buf_len, msg_len;

    fprintf(stderr, "\n%s\n", msg);
    buf_len = sizeof (err_msg);
    sqlglm(err_msg,  (size_t *)&buf_len,  (size_t *)&msg_len);
    fprintf(stderr, "%.*s\n", msg_len, err_msg);

    EXEC SQL ROLLBACK RELEASE;
    exit(1);
}


//=============================================
int oracle_connect(const char *id, const char *passwd, const char *conn)
{
EXEC SQL BEGIN DECLARE SECTION ;
	varchar USERID[UNAME_LEN];
	varchar PWD[PWD_LEN];
	varchar DBNAME[UNAME_LEN];
EXEC SQL END DECLARE SECTION ;	
	
	MEMCPY(id, USERID, UNAME_LEN);
	MEMCPY(passwd, PWD, PWD_LEN);
	MEMCPY(conn, DBNAME, UNAME_LEN);
	
    EXEC SQL CONNECT :USERID IDENTIFIED BY :PWD 
		USING :DBNAME ;
	  
    if(sqlca.sqlcode < 0) {
        fprintf(stderr, "Oracle Connect error: %.*s\n", sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
        return -1;
    }
    printf("\nConnected to ORACLE as user: %s\n", id);
    return 0;
}

//=============================================
void disconnect(){
	EXEC SQL COMMIT WORK RELEASE;
}


//=============================================
void toDate()
{
EXEC SQL BEGIN DECLARE SECTION ;
	varchar VDATE[10+1];
EXEC SQL END DECLARE SECTION ;	

	EXEC SQL SELECT TO_CHAR(SYSDATE,'RRRR-MM-DD') INTO :VDATE 
	FROM DUAL;

	VDATE.arr[VDATE.len] = '\0';
	
	printf(" VDATE=%s \n\n", VDATE.arr);
}



//=============================================
int emp_7900()
{
    char temp_char[32];

    emp_number = 0;
		
	
	//printf("\nEnter employee number: ");
    //fgets(temp_char, sizeof(temp_char), stdin);
    //emp_number = atoi(temp_char);
	emp_number = 7900;
	
	
    EXEC SQL SELECT empno, ename, sal, comm
        INTO :emprec INDICATOR :emprec_ind
        FROM EMP
        WHERE EMPNO = :emp_number;

    if(sqlca.sqlcode == 1403) {
        fprintf(stderr, "사번 [%d] 존재하지 않는 사번입니다.\n", emp_number);
        EXEC SQL ROLLBACK WORK RELEASE;
        return 0;
    } else if(sqlca.sqlcode < 0) {
        sql_error("조회 오류: ");
    }
	
    printf("\n\nEmpNo Employee   Salary    Commission\n");
    printf("--------   --------   -------   ----------\n");

    emprec.emp_name.arr[emprec.emp_name.len] = '\0';
    printf("%d      %s      %7.2f      "
		, emprec.empno, emprec.emp_name.arr, emprec.salary);

    if (emprec_ind.comm_ind == -1) {
        printf("NULL\n");
    } else {
        printf("%7.2f\n", emprec.commission);
    }

    return 0;
}

 
