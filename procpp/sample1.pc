/*
https://stackoverflow.com/questions/14615861/error-lnk2001-unresolved-reference-with-proc-code-with-visual-c
https://docs.oracle.com/cd/A57673_01/DOC/api/doc/PC_22/ch03a.htm
 *
 *  sample1.pc
 *
 *  Prompts the user for an employee number,
 *  then queries the emp table for the employee's
 *  name, salary and commission.  Uses indicator
 *  variables (in an indicator struct) to determine
 *  if the commission is NULL.
 *
 */
#include <unistd.h>

//#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>
#include <sqlda.h>
#include <sqlcpr.h>


#include "util.h"
#include "sample1.h"


//EXEC SQL INCLUDE SQLCA;
//EXEC SQL INCLUDE SQLDA;

//-------------------------------------------
/* Include the SQL Communications Area.
   You can use #include or EXEC SQL INCLUDE. 
*/

//-------------------------------------------
int testDate()
{
EXEC SQL BEGIN DECLARE SECTION ;
	VARCHAR		V_SYSDATE[10+1];
EXEC SQL END DECLARE SECTION ;	

	MemsetHost(V_SYSDATE);

	EXEC SQL SELECT TO_CHAR(SYSDATE,'RRRR-MM-DD') 
			INTO :V_SYSDATE 
		FROM DUAL;

	if(sqlca.sqlcode == 1403) {
		fprintf(stderr, "날짜 추출이 불가능합니다.");
		EXEC SQL ROLLBACK WORK RELEASE;
		return -1;
	} else if(sqlca.sqlcode < 0) {
		sql_error("조회 오류: ");
	}
	
	//V_SYSDATE.arr[V_SYSDATE.len] = '\0';
	
	printf(" V_SYSDATE=%s \n\n", V_SYSDATE.arr);

	return 0;
}

//-------------------------------------------
int sample1() 
{
EXEC SQL BEGIN DECLARE SECTION ;
	/* Define constants for VARCHAR lengths. */
	#define     UNAME_LEN      20
	#define     PWD_LEN        40

	/* varchar can be in lower case also. */
	/*
	Define a host structure for the output values of a SELECT statement.
	*/
	struct {
		VARCHAR   emp_name[UNAME_LEN];
		float     salary;
		float     commission;
	} emprec;
	/* 
	Define an indicator struct to correspond to the host output struct. */
	struct
	{
		short     emp_name_ind;
		short     sal_ind;
		short     comm_ind;
	} emprec_ind;

	/*  Input host variable. */
	int         emp_number;
	int         total_queried;
EXEC SQL END DECLARE SECTION ;

	char temp_char[32];


/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error--\n");

/* Loop, selecting individual employee's results */
	total_queried = 0;

    for (;;) {
	/* Break out of the inner loop when a 1403 ("No data found") condition occurs. */
		EXEC SQL WHENEVER NOT FOUND DO break;
		
		for (;;) {
            emp_number = 0;
            printf("\nEnter employee number (0 to quit): ");
			
		#ifdef __LINUX__
            fgets(temp_char, sizeof(temp_char), stdin);
		#else
			gets_s(temp_char);			
		#endif	
			
			
            emp_number = atoi(temp_char);
            if (emp_number == 0)
                break;

            EXEC SQL SELECT ename, sal, NVL(comm, 0)
                INTO :emprec INDICATOR :emprec_ind
                FROM EMP
                WHERE EMPNO = :emp_number
				;


/* Print data. */
            printf("\n\nEmployee\tSalary\t\tCommission\n");
            printf("--------\t------\t\t----------\n");
/* Null-terminate the output string data. */
            emprec.emp_name.arr[emprec.emp_name.len] = '\0';
            printf("%-8s\t%6.2f\t\t",
                emprec.emp_name.arr, emprec.salary);
            if (emprec_ind.comm_ind == -1)
                printf("NULL\n");
            else
                printf("%6.2f\n", emprec.commission);

            total_queried++;
        }  /* end inner for (;;) */
        if (emp_number == 0) break;
        printf("\nNot a valid employee number - try again.\n");
    } /* end outer for(;;) */

    printf("\n\nTotal rows returned was %d.\n", total_queried); 
    printf("\nG'day.\n\n\n");

	
	return 0;
}
